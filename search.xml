<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[浅谈bug描述]]></title>
    <url>%2F2018%2F04%2F08%2F%E6%B5%85%E8%B0%88bug%E6%8F%8F%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[引子清楚准确的描述BUG，这是测试人员的必备的基础。针对各种问题，我们如何使自己提交的BUG让开发人员看一遍就明白呢？我相信大部分人都会碰到以下这种情况: 我们提交上去的BUG在某些特定的环境下存在，这时候如果没有写清楚具体产生BUG的前提条件的话，BUG难以重现，这个时候开发就会说： 为什么我测试的时候没有出现这个问题呀？ 为什么在我的机器上没有出现这个问题呀？ 这个BUG是什么意思？ BUG理解偏差的根源1． 测试与开发理解需求有偏差 2． BUG的出现是有概率性的 3． BUG受环境影响 4． BUG在一定条件下存在 5． BUG受数据影响，数据量达到一定量时才存在。 6． 测试人员提交的BUG，描述不清楚，让开发人员不明白其意 BUG描述规范为了尽量避免以上问题的出现，我们测试就要尽量用最简洁的语言最清晰的描述出BUG的出处、操作步骤、现象等。下面讲一讲BUG的描述规则： 1．摘要主要用于指明Bug发生的地点、在什么条件下发生什么现象。 2．描述字段： 1）描述Bug发生的地点、所用账号类型、操作步骤、期望值、实际值， 如果Bug与浏览器相关，需尽量描述更多的环境参数，如操作系统等。 2) 一个Bug不会包含多个问题，会尽量单一化，便于跟踪处理及统计 3) 对于很难描述清楚的Bug需截屏作为附件上传，并在描述中写明参照附件。 4）尽量减少重现的步骤以达到用最少的步骤来重现问题； 5）不要使用完全的大写形式，那样会让人感觉象控诉。不要使用感叹号或其他表现个人感情色彩的词语或符号。 6）不要使用含糊的词语（例如，好像，似乎）来描述发现的现象。 7）在BUG提交前，测试人员应该反复阅读它，集中剔除那些没有关系的步骤或词语。隐含的或模糊的说明和那些由于对没有任何关系的细节或者那些在重现错误过程中不需要的步骤。 8）测试人员在精简空话的同时或其之后随即应该再仔细检查报告是否有会产生误解的地方。测试人员应该尽量避免使用模糊的，会产生歧义的和主观的词语。目标是使用能够表述事实，清楚的，不会产生争执的词语。 9）如有必要可以把产生结果的SQL语句放上去，不过需要开发人员在短时间内定位问题，否则测试人员不能保证数据的完整性。 10）如果是概率性的BUG，尽量重现BUG，找到BUG产生的条件，如果找不出BUG产生的原因必须写明BUG发生的概率大约是多少。 11）BUG如果在特定条件下产生的，必须写明BUG产生的条件和操作步聚。]]></content>
      <categories>
        <category>测试人生</category>
      </categories>
      <tags>
        <tag>测试感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[善于发现问题的职业素养]]></title>
    <url>%2F2018%2F04%2F08%2F%E5%96%84%E4%BA%8E%E5%8F%91%E7%8E%B0%E9%97%AE%E9%A2%98%E7%9A%84%E8%81%8C%E4%B8%9A%E7%B4%A0%E5%85%BB%2F</url>
    <content type="text"><![CDATA[背景最近团队里有几次需求上线都搞通宵了，当我得知XXXX需求上线通宵了，脑袋里立马想到的是为什么要通宵？什么环节出问题了？但负责XXXX需求上线的测试组长，没有主动跟我反馈通宵上线出了什么问题，更别说积极去推动问题的解决了。本文的重点不是去责备同事，是想和大家一起去讨论这个话题，善于发现问题是怎样的职业素养？ 下面，我从几个方面来分析分析，观点不一定大家都能认同，如有偏颇之处，尽请指正~ 招聘要求写这篇博客前，还特意去招聘网站(拉勾、BOSS直聘等)搜了下关键字“善于发现问题”，发现很多岗位招聘信息里面都有这个关键字，说明对于企业来说，善于发现问题是引起足够重视的，也是衡量候选人是否合适的一个维度。 价值体现善于发现问题是在工作中解决问题的重要环节。在我们的实际工作中，只有发现问题和认真分析问题真正原因之后才能很好地解决问题。一个优秀的员工最重要的工作就是要充分发挥自己的智慧，去努力发现工作当中的问题，如果一个员工连问题都发现不了，又何谈解决问题呢？ 个人成长事实证明，只有发现了问题之后才有可能正确地分析问题，进而解决问题，并使自己在工作中有更快的成长。尽管并不是所有的工作对于我们来讲都非常困难，但是只要我们用心，就一定能够找到更为简单有效的方法，而且最直接最有效的方法就是要求我们首先要能够正确地找出工作当中存在的问题，人只有在遇到问题的时候才能够发挥自己的聪明智慧，去细致地分析现实状况，去努力改进工作中的不足。 可见，发现问题的重要性。提出问题会引起我们的好奇心，从而激发找到解决问题的兴趣，从而诞生出改进需求和最终使用技术手段进行实现，发现问题是培养创新意识和创新思维的切入点。绝大多数人都希望成长，尤其我们做技术的，都梦想着有一天能成为大牛，成为大牛并不是遥不可及的梦想，只要在工作中不断的发现问题，发现有价值的问题，并不断的思考如何去解决问题，当发现的问题一个一个的被你解决了，有一天，你发现你在别人心目中已经是大牛了。 那些只会关注纯粹技术点的人，而对于工作中出现的大大小小的问题却视而不见的人，不解决痛点问题，是成长很慢的。]]></content>
      <categories>
        <category>测试人生</category>
      </categories>
      <tags>
        <tag>测试感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次团队内部开展如何学习的交流会]]></title>
    <url>%2F2018%2F04%2F03%2F%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9B%A2%E9%98%9F%E5%86%85%E9%83%A8%E5%BC%80%E5%B1%95%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E7%9A%84%E4%BA%A4%E6%B5%81%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[背景去年底制定了2018年团队培训计划，培训内容包括业务介绍、linux、中间件、自动化测试、性能测试、安全测试等主题，排期上基本一周一次。年后进行了一两次，一次是白盒测试初体验，一次是测试小白的成长经历，效果还可以。后来因为一些事情，我不得不对培训计划做了一些调整，优先进行一些各产品线业务的分享，对业务分享也提了一些要求：必须包括系统架构、业务流程图、网络拓扑图、服务模块介绍、数据库表设计、系统演示和测试重点。由于对培训内容做了这样的调整，做了张问卷调查，收集下大家的反馈意见，调查结果是大多数人都想听技术培训，不太想听业务培训，这样的结果是在我的意料之中的，只能说现在国内的测试大环境下，很多人已经迷失了自己，很迷茫，不知道测试的真正价值是什么？人云亦云，会自动化测试、会性能测试、会写代码很吃香，这篇文章不去探讨这些人云亦云的东西对不对，适不适合当前的自己。假设我们需要具备这些能力，大家都是如何去学习的？如何去达成自己的目标的？ 团队里面会学习的人挺少的，作为leader，不管效果如何，都有必要去帮助大家学习成长，于是发起了这样的一次交流会。 准备工作在进行交流会的前几天，我用思维导图大概罗列了下交流讨论的思路，如何发给大家做一些准备工作，大致思路如下图： 时长整个交流会时间大概1个半小时，每个人大概5分钟 人员参与人员为团队所有同事，20人左右 形式每一个人都围绕着这个思路聊聊自己是如何学习的，最后发表下自己的观点和感受 过程一开始，我希望每个人都能主动的去分享自己是如何学习的，可惜主动的人很少。只能我一个一个点名来说，每个人发表的观点关键字我都写在白板上，字有点丑，里面就将就着看 然后从这些点进行归纳，罗列出最关键的内容，团队的一个实习生妹子做的会议纪要，把最关键的点用文字再组织了下，写的挺认真的。 （1）学习要善于总结； （2）学以致用，代码需多动手多练习； （3）不要害怕麻烦； （4）敢于吃苦； （5）在学习中寻找成就感； （6）维护自尊心，不能被开发鄙视； （7）兴趣是最好的老师，培养学习的兴趣； （8）多与开发聊天，从中尽量减少自己的盲区； （9）一个知识点一个知识点的去学习，不要急于求成； （10）不懂的应该马上查资料，弄清楚原理； （11）学习最新的技术，感受危机感； （12）需求是测试的根本，要对需求理解透彻，学会切换不同的角色； （13）自身体验测试的产品整个流程； （14）提高自己的自律性，监督自己自学； （15）最难得可贵的是“坚持”二字； （16）自发性的学习，提高自己的主动性； （17）不要以忙为不学习的借口，告别惰性； （18）学习方法很重要，可提高学习效率，增强成就感。 总结在交流会结束前几分钟，我做了最后的总结，人人都想学技术，每一个都扪心自问，你做到了下面几点？ 感兴趣：这个东西没兴趣，就很难坚持下去，就会三天打鱼两天晒网 坚持吃苦：吃不了苦的人，很难坚持枯燥的学习，一有诱惑就抵挡不住，还给自己找一堆借口，不是自己不想学，而是因为。。。 好的学习方法：这是一个信息量爆炸的时代，任何你想学习的技术，都有一大堆的心得经验，一大堆的最佳实践，自己无法鉴别无法找到适合自己的学习方法，可能事倍功半，也可能被淹没在这些知识海洋里，一无所获 主动：不主动的人，学技术，只会关注事情的一个点，而不会去主动去关注一条线，更别说去关注一个面，不会主动去研究原理性的东西，最终学到的东西就只会是很肤浅很狭窄，知其然但不知其所以然 最后，我想说的是：学习是自己的事情，没有人会手把手的教你，当你意识到自己想学习某个技术的时候，问问自己学习的目的是什么？你做好准备了吗？我建议那些想学技术的测试同行，不要盲目听别人的，要有自己的判断，确定自己要下决心学了，那么就拿出学习的态度来，做好枯燥、寂寞、吃苦的准备，坚持每天都学习，不要给自己找任何借口，要抵得住诱惑，然后在学习的过程中摸索自己的学习方法。不管是自己搭建环境捣鼓还是运用在工作中，不断的找到学习这个技术给你带来的成就感，有了成就感才会激发你下一个阶段的学习激情。当你回过头看看之前的你，是否成长了，还是一直徘徊在原地。 温馨提示：对于那些对某个技术感兴趣，但不太主动和不知道如何学的测试同行，可以花钱报培训班，花钱了一定程度上会督促你坚持学下去]]></content>
      <categories>
        <category>测试人生</category>
      </categories>
      <tags>
        <tag>测试感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bug案例分享模板]]></title>
    <url>%2F2018%2F04%2F03%2Fbug%E6%A1%88%E4%BE%8B%E5%88%86%E4%BA%AB%E6%A8%A1%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[目的通过bug案例分享，一方面让发现这个bug的测试人员能更深入的去分析这个bug发现的过程、产生的真正原因、导致的影响，并评估开发人员给出的解决方案是否“完美”，从而提升自己；另一方面让参与分享的人员能换位思考，如果换做自己去测试，是否能发现这样的bug，如不能，是欠缺在哪里？ 让自己清楚的知道自己的短板，拓宽自己的思路； 模板如下 1、 缺陷描述（场景、步骤、预期、实际）场景：需求描述 操作步骤：详细描述发现bug的操作步骤 预期结果：详细写明预期结果 实际结果：详细写明实际结果 2、 解决方案详细了解修复此bug的方案 3、 总结详细总结此bug可能造成的影响、后续如何预防，从中的收获 4、 自我评分及理由]]></content>
      <categories>
        <category>测试人生</category>
      </categories>
      <tags>
        <tag>测试感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[团队里需要什么样的人]]></title>
    <url>%2F2018%2F04%2F01%2F%E5%9B%A2%E9%98%9F%E9%87%8C%E9%9C%80%E8%A6%81%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[好久没有写博客了，2018年已经过去1/4，之前制定的一年24篇博客的目标计划得赶点紧了。最近这段时间，事情很多很杂，有家庭方面的，有工作方面的，总想偷点懒。想写的东西很多，刚好技术部一季度考核正在进行中，期间有挺多感触的，今天就跟大家聊聊这个话题：团队里需要什么样的人 有人会说，团队里当然需要牛人，大牛越多越好。对于这样的观点，前半句我认同，后半句不太认同的，为什么？简单的分析分析 人力成本问题大牛必然市场价很高，招大量的牛人，绝大公司的经济实力是承担不起的 时间成本问题大牛都是见过世面的，大牛都是希望在团队中体现个人价值的，当需要进行技术方案选型、替换时，大牛们都会从各自的专业领域进行激烈的讨论和PK，偶尔还会争得面红耳赤，最终导致方案很难第一时间落地推行，无畏的增加了沟通成本和时间成本 当然，现在互联网炙手可热的AI、量子学等高精尖科技领域，需要很高的准入门槛，引入很多的牛人实属正常。这也不是一般的互联网公司企业敢去涉猎的领域，在国内无非是BATJ这些第一梯队的互联网公司，还有一些拥有大量现金流的第二梯队互联网公司，如新美大、滴滴等 所以，很多公司招人的原则是：招最合适的人而不是最贵的人 这其实就是说，团队是需要划分梯度的，根据公司研发现状，在团队里匹配不同梯度的人才，技术大牛需要，管理人才也需要；需要有探索精神喜欢研究行业内各种实践和工具的人，需要勤勤恳恳认真执行任务的人，等等 今天不聊开发、测试、运维等岗位人才，不聊技术，不聊管理，聊聊作为一个职场人，什么样的软技能是重要的，可以让领导让同事都感受到这样的人是值得信任的，可以承担重任的。 主动性很强的人说的不是那种经常主动拍领导马屁的人，这类人可能在一些公司会混的人模狗样。这类人会让我觉得恶心，也讨厌跟这类人有太多的交集。主动性很强的人，不论在工作方面还是在生活方面，都会给人一种积极向上的精神面貌。主动性很强的人，在面对一件任务时，会主动去了解任务当前情况，是否有风险存在，进度如何，有没有困难存在。当任务比较棘手或存在风险，困难重重时，他们不会被动等待，而是会主动出击，迎难而上，主动去分析风险，并寻求解决风险或规避风险的方法。主动性很强的人，会及时反馈任务进度和当前存在的问题，而不需要等到领导问。 踏实勤奋的人这类人不会好高骛远，交给他们的任务会脚踏实地的完成，而不用担心偷工减料，投机取巧。踏实的人，往往也是属于那种勤奋的人，哪怕这个任务又脏又累，他们也不会偷懒，就算加班加点也要踏踏实实的做好。 有上进心的人有句俗语说的好：不愿当将军的士兵不是好士兵。在企业里，如果一个员工安于现状，不思进取，那么这样的员工也是不讨领导喜欢的，也是难以担当重任的。最近看到一篇文章，里面提到一个观点，特别的印象深刻：有些人已经破产了，只是待的公司还没有倒闭而已。这句话其实就是说没有上进心的人，不会去不断提升自己的市场竞争力，而是温水煮青蛙的在企业里待着，等到有一天公司真的倒闭了才发现原来自己已经被市场淘汰了。这个道理大家都懂，但却有不少人做不到，可能有人会说，我也会看书学习啊，也会给自己充电啊。可是三天打鱼两天晒网，东学一下西学一下，到头来啥也没学会，我认为也属没有上进心的一类人。 学习能力强的人这个社会处处充满了你未知的东西，需要人们不断的去学习，尤其是IT行业，各种技术层出不穷，一旦你停止不学了或者找不到好的学习方法时，很快就会跟不上这些技术更新的步伐了。所以，只有学习能力强才能快速的获取新知识，才能顺利完成那些你之前所没有做过的任务。 这样的人，一定是团队里最需要的人。作为职场人，具备很好的软技能，反而会比硬技能更重要。身上具备了很好的软技能，领导一定会愿意将更重要的任务给你去完成，因为他相信你一定能完成的很好，而无须各种担心耽误事。所以，希望这些人不用迷茫，担心没有过硬的硬技能，会得不到领导同事的认可，体现不出自己的价值，相比软技能来说，硬技能的掌握反而更容易。 这篇博客完成的很匆忙，可能有很多观点没有阐述清楚，后面有机会再另外的博客里详细描述观点。]]></content>
      <categories>
        <category>测试人生</category>
      </categories>
      <tags>
        <tag>测试感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gatling实时监控配置]]></title>
    <url>%2F2018%2F01%2F27%2FGatling%E5%AE%9E%E6%97%B6%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[背景最近在研究Gatling，这是一款发布很久但在国内使用范围不是很广泛的压测工具。研究这款工具的理由很简单，很喜欢生成的html报告，本文会提供几张截图给大家一个直观感受，但这不是本文的重点，Gatling官网下载的版本不支持实时监控，只有在simulations结束后，打开html报告才能看到数据图表，这不符合我们边压测边看图表的习惯。 实时监控官网说明文档中有关于实时监控章节的介绍，有兴趣的同学可以直接去官网看Realtime monitoring，本文要介绍的部署方式：influxdb + grafana采用docker部署，更方便便捷。 博主服务器环境为centos7，如为ubuntu、mac等环境，请自行研究，应该大致上差不多 部署安装镜像在安装influxdb和grafana镜像前，先安装docker环境和docker-compose环境。Docker-Compose是一个部署多个容器的简单但是非常必要的工具 docker安装 1[root@host-10-200-143-10 local]# yum -y install docker docker-compose安装 安装Docker-Compose之前，请先安装 python-pip。1、首先检查linux有没有安装python-pip包，终端执行 pip -V12[root@vm-50-151 network-scripts]# pip -V-bash: pip: command not found 没有python-pip包就执行命令 yum -y install epel-release1[root@vm-50-151 network-scripts]# yum -y install epel-release 3、执行成功之后，再次执行yum -y install python-pip1[root@vm-50-151 network-scripts]# yum install python-pip 4、对安装好的pip进行升级 pip install –upgrade pip1[root@vm-50-151 network-scripts]# pip install --upgrade pip 至此，pip安装好了，执行pip -V 再次检查pip环境。12[root@host-10-200-143-10 local]# pip -Vpip 9.0.1 from /usr/lib/python2.7/site-packages (python 2.7) 安装Docker-Compose1[root@host-10-200-143-10 local]# pip install docker-compose 检查docker-compose 安装：docker-compose -version12[root@host-10-200-143-10 local]# docker-compose -versiondocker-compose version 1.18.0, build 8dd22a9 influxdb镜像 1docker pull influxdb; grafana镜像 1docker pull grafana/grafana; 配置文件在服务器/usr/local目录下创建monitor目录，并在monitor下创建两个目录influxdb和grafana12[root@host-10-200-143-10 local]# ls monitorgrafana influxdb 在influxdb目录下新建docker-compose.yml文件，文件内容如下：12345678910[root@host-10-200-143-10 influxdb]# cat docker-compose.yml version: "2"services: influxdb: image: influxdb ports: - 8086:8086 - 2003:2003 environment: - INFLUXDB_GRAPHITE_ENABLED=true 8086端口为influxdb的监听端口，2003端口为gatling的监听端口 在grafana目录下新建docker-compose.yml文件，文件内容如下：12345678910[root@host-10-200-143-10 grafana]# cat docker-compose.yml version: "2"services: influxdb: image: grafana/grafana ports: - 3000:3000 environment: - GF_SERVER_ROOT_UR=http://127.0.0.1 - GF_SECURITY_ADMIN_PASSWORD=passwd 3000端口为grafana的监听端口 配置完influxdb和grafana后，我们再配置gatling内容，进入gatling的conf目录下，打开gatling.conf，按照实际情况修改如下内容： 配置文件配置完成后，然后就是依次启动influxdb和grafana服务 服务启动influxdb启动进入/usr/local目录下，执行如下命令：1[root@host-10-200-143-10 local]# docker-compose -f monitor/influxdb/docker-compose.yml up -d 检查influxdb启动结果,运行命令docker ps123[root@host-10-200-143-10 local]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESffa5f8edeea6 influxdb "/entrypoint.sh influ" 2 hours ago Up 2 hours 0.0.0.0:2003-&gt;2003/tcp, 0.0.0.0:8086-&gt;8086/tcp influxdb_influxdb_1 进入influxdb容器，修改配置文件12[root@host-10-200-143-10 local]# docker exec -it ffa5f8edeea6 bashroot@ffa5f8edeea6:/# 安装vim编辑器12apt-get updateapt-get install -y vim 修改influxdb配置文件，添加如下内容:12345678910111213141516root@ffa5f8edeea6:/# vim /etc/influxdb/influxdb.conf [meta] dir = "/var/lib/influxdb/meta"[data] dir = "/var/lib/influxdb/data" engine = "tsm1" wal-dir = "/var/lib/influxdb/wal"[[graphite]] enabled = true database = "gatlingdb" templates = [ "gatling.*.*.*.* measurement.simulation.request.status.field", "gatling.*.users.*.* measurement.simulation.measurement.request.field" ] influxdb配置文件修改后，需要重启容器，操作步骤如下：1、退出influxdb容器2、进入到/usr/local/monitor/influxdb目录下，执行命令docker-compose restart grafana启动进入/usr/local目录下，执行如下命令：1[root@host-10-200-143-10 local]# docker-compose -f monitor/grafana/docker-compose.yml up -d grafana管理后台操作启动成功后，访问http://10.200.143.10:3000即可打开grafana管理页面，进入登录页面： 用户名默认为admin，密码为前面grafana目录下docker-compose.yml配置的密码，登录成功后看到的页面 配置数据源Data Sources，如 配置完成后，点击保存，这里可能会遇到如下问题 解决方法：1、进入influxdb控制台123[root@host-10-200-143-10 local]# influxConnected to http://localhost:8086 version 1.4.2InfluxDB shell version: 1.2.4 2、查看influxdb数据库12345&gt; show databases;name: databasesname----_internal 确实没有gatlingdb数据库，但我们可能新建gatlingdb数据库 3、新建gatlingdb数据库1234567&gt; create database gatlingdb;&gt; show databases;name: databasesname----_internalgatlingdb 说明gatlingdb数据库创建好了，然后就是导入实时监控模板，模板地址：https://github.com/gatling/gatling/blob/master/src/sphinx/realtime_monitoring/code/gatling.json 将模板json import到监控面板即可 终于弄好了，现在见证奇迹的时候到了，执行gatling的scala脚本，实时监控压测情况 实时监控图表 参考资料：https://testerhome.com/topics/9380http://gatling.io/docs/current/realtime_monitoring/]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Gatling</tag>
        <tag>influxdb</tag>
        <tag>grafana</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年工作学习计划]]></title>
    <url>%2F2018%2F01%2F21%2F2018%E5%B9%B4%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[给自己定的2018年工作学习计划还是有较大难度的，给自己打气，全力以赴的完成！！！]]></content>
      <categories>
        <category>测试人生</category>
      </categories>
      <tags>
        <tag>测试感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017年回顾]]></title>
    <url>%2F2018%2F01%2F11%2F2017%E5%B9%B4%E5%9B%9E%E9%A1%BE%2F</url>
    <content type="text"><![CDATA[2017年一晃眼就过去了，未来得及感叹时光如梭，2018年迫不及待的来了。 回忆过去，总结过去，规划未来，你的人生才会越来越精彩。趁着2017年预热还未完全散去，将脑海中的记忆碎片进行整理，不敢奢望跟电影一样播放2017年经历的种种，能想起多少算多少~~~ 如果要给自己2017年打分的话，我觉得差不多及格吧，60分刚刚好。为什么会给自己这样的分数，我认为，这一年下来，有些事情自己做的还比较满意，有些事情做的不尽如意，也有些事情感觉有些遗憾，如果时光倒流一定会做的尽量完美，当然，这是一种废话。 我个人比较喜欢先说认为比较好的事情，再说认为不好的事情。 一、感觉不错的事情 IApiTests框架开发及维护 这是一个接口自动化测试框架，仅支持http/https协议的接口，如现在市面上主流的restful接口。有人要吐槽说，这样的框架在行业内烂大街，有什么好拿出来来说，用到的技术都差不多。这点我认同，确实没啥技术含量，只是自我感觉良好而已。不求得到业界的认可，只要我们公司能用起来，发挥了这个框架的作用，我就知足了。后续我会在我的博客发布关于IApiTests框架一系列的文章，有兴趣的朋友可以一起交流学习，欢迎大家留言。 测试工具平台开发及维护 XXXX平台，取这样的名字有点唬人，我高兴啊，乐意取这样的名字。目前这个平台提供的功能还比较少，包括MD5和DES3加解密、时间戳转换等，让我们的测试人员能够很方便的使用这个平台进行接口测试工作，而不需要依赖开发帮助。平台采用前后端分类架构，服务端采用spring boot开发框架，前端采用vue.js+ElementUI开发框架，非常的简单清爽。目前在开发中的功能有各种缺陷分析的图表，如缺陷收敛图、发现缺陷难易程度等，博主公司使用禅道管理缺陷，禅道没有这些图表，而这几个图表我认为是非常重要的，是衡量项目/版本质量好坏的很有利的证据。图表的功能实现，会采用百度的echarts图表库；采集的数据会储存在数据库中，使用spring data jpa框架。 成功推荐前公司CTO到现在公司 有人说，靠，这有啥好说的，其实不然，中间的过程还是挺曲折的，最终是双赢的，公司吸引了一位高端人才，CTO也找到了自己的舞台，发挥了自己的价值。 团队组建 这是最值得自豪的事情了，至少我司很多人忒羡慕我，哈哈，为啥羡慕？ 有的人很有慧根，一下子就猜到了，美女成群呗。就这么说吧，我的团队男女比例接近2:8，而且都是高颜值的。每天一波一波的闷骚程序猿往这边凑，送吃的，送喝的，各种“巴结”我，还挺烦人的，哈哈哈。 我们团队目前十五六人，大多数人都是下半年慢慢招进来的。团队规模不断的壮大，支撑的项目也越来越多，很多问题都暴露出来了，比如大家坐的很分散，跟着项目组，大家吐槽彼此不熟悉，没有团队归属感；人员水平参差不齐，整体水平不高，流程不规范，测试进度把控不好，效率低下。作为Leader，那段时间我脑子里面一直在思考这些问题，挺困扰的。为了改变这些现状，放了不少血，请吃饭，发红包，唱歌，射箭攀岩，跟人事协调，安排大家集中坐在一起，有些项目组还不是很配合，说什么不跟项目组坐在一起沟通不方便效率低下，我的态度还是坚决的，这是我们团队所有人员的期盼，我要顺应民心，而且不是很认同他们的观点，事实上经过几个月的观察，各项目组的沟通并未有啥影响。 这个问题很好的解决了，但每个个体的差异性问题，非常棘手，而且不是一朝一夕能改善的。没办法，十八般武艺，都得耍出来，制定流程规范，制定培训分享计划，挑典范项目，跟产品、开发撕逼，凡是对的事情都在坚持做，慢慢的，和前几个月对比，明显感受到大家的变化，团队的变化，都在朝着我期望的方向进行，这点让我很欣慰也很感动。 和技术相比，管理团队真的更难，如何让大家能听你的，而且是开心主动的去做一些你安排的工作内容，真的要很花心思。这个过程只有自己经历了，才能真正体会到其中的苦与甜。每个管理者都会有一套自己的管理方式，我自己总结最核心的三大要素就是：人、流程、技术。真诚待人，不要体现分明的上下级关系，大家只是分工不同而已；灵活高效的流程规范，既可以确保关键节点的产出，又不引起大家的排斥反感情绪；至于技术，不需要解释吧，大家都懂的。 上面这些，是自认为做的还可以之处，但还是有很多地方有不足和遗憾，希望在2018年能改进和优化。 二、不足和遗憾 阅读量太少，阅读面太窄 2017年虽然买了快20本书，但只看了不到5本，还有的书籍看了一点点就没有坚持下去。还是觉得自己这方面缺乏一些坚持，虽然2017年事情很多，这不应该成为看不完的借口，买的书还是应该花时间看完。现在很多人都多了分浮躁，少了分坚持，想走各种捷径，幻想着一朝一夕就能获取很多知识，而不能静下来好好的把自己想获取的知识通过阅读书籍来实现，最终你学到的只不过是一些皮毛，根本经不起现实的考验。 除了阅读量太少，阅读面也不够广，买的书大多数都是技术书籍，想想，到了中立之年了，需要去接触和获取一些其他方面的知识了，如管理、金融等领域。这个年纪了，不得不服老，还真学不过那些90后，我们的目标是管理好这些90后，发挥他们的价值，给公司创造更高的价值。 掌握的知识深度不够 代码写的太少，编程能力深度不够； 框架设计层面没有考虑设计模式，功能新增修改太费劲，扩展性太差； 性能测试涉及的层面很多都了解肤浅，比如监控命令采集数据的来源，操作系统原理，linux内核信息等，JVM只知道简单的参数、内存管理，更深入的JVM原理没有深入研究，等等； 数据库方面，也做了一些SQL调优方面的实践，而且性能提升最高的达到1000倍，但数据库的配置优化方面还很欠缺，对数据库底层原理了解太少，虽然我们测试人员不需要像DBA那样精通数据库，如果你是测试领域的专家，你应该是那个团队中的大神，甚至得到众多开发的高度认可； 虽然知识面广度还可能，但越发觉得自己的无知了，知其然，但不知其所以然，希望2018年能在某几个领域深入下去 家庭照顾不周 团队规模越来越大，支撑的项目越来越多，需要沟通协调的事情越来越多，加班也越来越多。时间是恒定的，自然在家庭方面投入的时间就少了，2017年，我成为了一个准爸爸，特别开心。老婆怀孕更需要好好照顾，想法子弄各种好吃的，由于父母身体不好，没有在这边待着，家里只有我可以照顾老婆和肚子里的宝宝，工作日加班多，不能在家做饭，只能周末两天好好弄些好吃的好喝的。这样的局面可能还需要维持一段时间，培养了几个小组长，慢慢可能承担更多的任务了，有一些事情交给他们处理就可以了。 写了挺多的了，2017年的总结差不多了，几年之后，当自己看到这篇博客的时候，不知道会是怎样的状态？ 概况下2017年，在团队管理方面倾注了更多的心血，看到团队的氛围很融洽，算是对我的付出的一种认可吧；知识沉淀方面还是有些浮躁和不够执着，学习知识深入还不够；工作固然重要，也重不过家庭和身体，最好是能在这三者之间找到最好的平衡点。 2017年已成过去，不管如何，调整好自己，2018年做更好的自己。]]></content>
      <categories>
        <category>测试人生</category>
      </categories>
      <tags>
        <tag>测试感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你给公司创造了多少价值]]></title>
    <url>%2F2018%2F01%2F09%2F%E4%BD%A0%E7%BB%99%E5%85%AC%E5%8F%B8%E5%88%9B%E9%80%A0%E4%BA%86%E5%A4%9A%E5%B0%91%E4%BB%B7%E5%80%BC%2F</url>
    <content type="text"><![CDATA[Tips: 这是博主几年前写的，记录当时自己的一些感想 公司每年有两次晋升机会，年中年末。 这次，我向leader申请晋升机会，今天leader叫我去会议室聊聊。 开始问我你觉得你给团队带来了哪些帮助？ 有没有因为你提高了整个团队的效率？ 我完成了几个项目的主流程自动化的覆盖，达到了持续集成的目的。我写过一个工具，用来同步hudson的配置数据，保持应用服务器的配置和hudson服务器的配置一致，节省了因为配置不一致进行问题排查所花费的时间，提高了整个团队的工作效率。 还问了一些其他的问题，就不一一叙述了。 最后，leader问我，你觉得你给公司创造了多少价值，给公司的未来创造了多少价值？ 这个问题把我问倒了，我不知道怎么回答，不知道从哪些方面来回答，只觉得这个问题好抽象，我笑笑说，这个我还真没认真想过，说不出具体的点点面面来。 leader说，这个你好好想想，我不会告诉你答案，这个问题还没有答案。不过公司的晋升评审时，评委们都是以这个问题为导线而展开的。 有人肯定会说，只要你在这个公司做，只要公司在盈利，你创造的价值肯定大于你所获得的价值。 但是，有没有一个大概的值呢？怎样去估算这个值呢？可以从哪些方面来一点一点的细化你所创造的价值呢？ 大家一起去思考吧，也希望大家可以一起交流、学习。]]></content>
      <categories>
        <category>测试人生</category>
      </categories>
      <tags>
        <tag>测试感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何看待开发的随意变更模块功能]]></title>
    <url>%2F2018%2F01%2F08%2F%E5%A6%82%E4%BD%95%E7%9C%8B%E5%BE%85%E5%BC%80%E5%8F%91%E7%9A%84%E9%9A%8F%E6%84%8F%E5%8F%98%E6%9B%B4%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[这几天也有在51testing上浏览一些文章，关于开发和测试之间的关系的文章，非常的多。 大部分比例的观点都会描述开发和测试之间存在居多的问题，比如开发认为测试爱找茬，喜欢钻牛角尖，测试认为开发不懂测试，质量意识不强，等等。 今天，在工作中，我经历了一件事情。项目即将发布了，开发对一个模块某个功能的实现换了别的逻辑，而这个变动作为这个项目的测试负责人的我是透明的，我不知道开发改变了这个逻辑。但幸好在项目冒烟测试阶段，我就编写了所有模块的主流程的自动化脚本，并进行每天的回归测试。在今天发现部分脚本执行失败，排查原因发现变更了逻辑的地方脚本报错了，于是和开发确认后，是变更逻辑所致。 后来我又排查了另外几个失败的脚本，发现又有一个文本输入限制的逻辑也变更了。 对于这种情况，我觉得对于开发来说，功能的变更太随便了，在他们的意识里没有完整的质量意识，认为自己变更的只是一个小功能，没有必要知会测试。但是，往往是开发的这种习惯，最后却导致线上的故障。 对于开发的这种习惯，也有几个相应的措施来监控，一个就是监控他们每次提交的代码，二个就是通过自动化脚本进行持续集成，不断的校验系统各模块的功能。当然，也幸好有后者，让我发现了这个问题的所在。 在这里，虽然问题在发布前被发现，但我们想想，如果我们没有这个条件，在已经测试好几轮后，开发又偷偷改动了其他的功能，悲剧迟早会发生的。 思考再三，我觉得自己还是唱个黑脸，在项目交流群里，把这几个问题抛出来，并表明我的观点：在即将发布前，开发随意的变更功能，不知会测试，这样的项目质量让测试如何有信心来保证。 开发也抛出了自己的观点，说这都是一些小的功能，没有必要事事都告知测试吧，觉得我是在钻牛角尖。但我觉得，这不单单仅仅是功能大小的问题，而是一种意识，一种习惯。即使我也觉得这几个小变更确实不会对系统造成大的影响，但是，我很害怕开发的这种习惯，或许哪天，因为这种情况，人算不如天算，在发布后因为小功能导致重大问题，这种情况不是没可能，我情愿做个悲观者。 对于开发来说，测试有责任去杜绝开发的这种习惯，去培养他们良好的质量意识，现在很流行的缺陷预防，我想，如果开发也有良好的质量意识，未尝不是在进行有效的缺陷预防。]]></content>
      <categories>
        <category>测试人生</category>
      </categories>
      <tags>
        <tag>测试感悟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDownPad 2实用教程]]></title>
    <url>%2F2018%2F01%2F06%2FMarkDownPad%202%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[MarkDownPad 2实用教程 前言： MarkdownPad 是一款免费的将文本转换成HTML/XHTML的网页格式的小软件，操作简单容易，上手很快，可让你可以即时预览转换后的样式的同时，又不会加入Office特有的编版码，有需要朋友可以进行尝试。 背景 网上关于MarkDownPad2的资料既少又零散，笔者在踩了很多坑之后，决定写一篇完善的文章，将大多数新手可能需要的信息整理到一起，少走弯路。 本文共分几个部分来进行展开： 下载安装 中文汉化、破解 语法介绍 高级玩法 1. 下载安装1.1 下载 Tips：MarkDownPad2是一款国外收费软件，有钱任性的可以buy 官网地址MarkDownPad2，可以取官网了解下MarkDownPad2一些介绍之类，我们就不在这绕弯子了，直接进入主题：选择下载安装破解版，并进行汉化。 笔者是在这里下载的：http://www.pc6.com/softview/SoftView_73153.html 如不能破解，请联系我获取～ 1.2 安装 跟安装其他Windows软件一样，不具体介绍了 1.3 中文汉化 打开软件，点击Tools 点击Options 修改语言为中文并重启应用程序即可 1.4 破解 解压下载下来的包，然后解压Pa_ttrar.rar这个包 运行包中的Pa_ttrar.exe文件 点击path,然后点击是 选择这个包软件的程序包中的MarkdownPad2.exe.config文件 点击打开，运行后关闭程序 这样就可以了，现在你打开程序就可以看到的就是中文破解版的了 2. 语法介绍 有了上面的配置，我们就可以开始markdown之旅了，但是没有语法，就没有漂亮的排版。 2.1 标题 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 2.2 列表A.无序列表 语法很简单，在文字前加上 - 或 * 即可。 - 我是第一行 - 我是第二行 * 我是第三行 * 我是第四行 Tips：- * 等符号要和文字之间加上一个字符的空格！ B.有序列表 直接在文字前加1. 2. 3. 符号1.我是第一行2.我是第二行3.我是第三行 2.3 引用 需要在文本前加入 &gt; 这种尖括号（大于号）即可 > 我一直在使用引用。 > 从开始到现在。 Tips： &gt;符号要和文字之间加上一个字符的空格！而且是在英文输入法的条件下输入！ 2.4 图片和链接 图片与链接 插入链接与插入图片的语法很像，区别在一个 !号 图片为：![]() 举例：![美女矢量素材](https://i.imgur.com/lPKrI8e.png) 链接为：[]() 举例：[美女矢量素材](https://i.imgur.com/lPKrI8e.png) 图片举例： 链接举例：美女矢量素材 2.5 粗体与斜体 Markdown 的粗体和斜体也非常简单，用两个 包含一段文本就是粗体的语法，用一个 包含一段文本就是斜体的语法。 例如：这里是粗体 这里是斜体 粗体 举例：**粗体** 斜体 举例：*斜体* 2.6 表格 说明：|表头1|表头2|表头3||:—-|:—-:|—-:||居左|居中|居右| 举例： | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | 效果如下： Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 示例表格转换成html代码就是这样1234567891011121314151617181920212223242526&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Tables&lt;/th&gt; &lt;th style="text-align:center"&gt;Are&lt;/th&gt; &lt;th style="text-align:right"&gt;Cool&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;col 3 is&lt;/td&gt; &lt;td style="text-align:center"&gt;right-aligned&lt;/td&gt; &lt;td style="text-align:right"&gt;$1600&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;col 2 is&lt;/td&gt; &lt;td style="text-align:center"&gt;centered&lt;/td&gt; &lt;td style="text-align:right"&gt;$12&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;zebra stripes&lt;/td&gt; &lt;td style="text-align:center"&gt;are neat&lt;/td&gt; &lt;td style="text-align:right"&gt;$1&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt; 2.7 代码框 连续三个反引号`，就是按键1前面的那个符号再加代码类型. 1234567891011121314package com.hkteam.hk.ui;import com.hkteam.hk.R;import android.os.Bundle;public class AboutHkActivity extends BaseActivity&#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_about_hk); &#125;&#125; 效果如下： package com.hkteam.hk.ui; import com.hkteam.hk.R; import android.os.Bundle; public class AboutHkActivity extends BaseActivity{ @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_about_hk); } } 2.8 横线 分割线的语法只需要三个 * 号。 2.9 转义字符 \\ 反斜杠 \` 反引号 \* 星号 \_ 下划线 \{} 大括号 \[] 中括号 \() 小括号 \# 井号 \+ 加号 \- 减号 \. 英文句号 \! 感叹号 效果如下： \ 反斜杠` 反引号* 星号_ 下划线{} 大括号[] 中括号() 小括号# 井号+ 加号- 减号. 英文句号! 感叹号 2.10 快捷键MarkdownPad 2 常用快捷键 Ctrl + I ： 斜体 Ctrl + B ： 粗体 Ctrl + G ： 图片 Ctrl + Q ： 引用 Ctrl + 1 ： 标题 1 Ctrl + 2 ： 标题 2 Ctrl + 3 ： 标题 3 Ctrl + K ： 代码块 Ctrl + L ： 超链接 Ctrl + T ： 时间戳 Ctrl + U ： 无序列表 Ctrl + R ： 水平标尺 F4 ： 启用水平布局 F5 ： 启用实时预览 F6 ： 在浏览器中预览 Ctrl + Shift + O ： 有序列表 MarkDownPad 2的语法介绍完了，我们可以记住这些语法的使用方法。对于新手来说，多多练习就能完全掌握，也可以鼠标点击工具栏上的图标来帮助你完成写作；对于高手来说，键盘操作才是黑科技，那么记住这些快捷键是基本功。 3. 高级玩法3.1 代码高亮MarkDownPad 2 默认不会对代码块进行着色，要达到酷炫的代码高亮的效果，需要进行一些配置。 进入markdownpad2》高级》工具》选项》高级》HTMLHead编辑器将如下代码粘贴进去 123&lt;link rel="stylesheet" href="https://cdn.bootcss.com/highlight.js/8.0/styles/solarized_dark.min.css"&gt;&lt;script src="https://cdn.bootcss.com/highlight.js/8.0/highlight.min.js"&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt; 在编辑器中敲击代码在按F6在浏览器中打开，可看到代码高亮了 3.2 自定义样式表MarkDownPad 2内置的样式表有：markdown.css 、none.css 、markdownpad-github.css、solarized-dark.css 、solarized-light.css 选择“工具——选项——样式表”可以看到样式表的设置界面 或“按F7——样式表”，如下图 上面列出的5种样式表，你都可以对它们进行编辑，修改为你想要的样式也可以自定义添加样式表 Tips：要修改样式表或自定义添加样式表，前提条件：学过html、css，具备修改css的能力 3.3 快速高效的写出漂亮的API接口文档 希望达到以下效果： 例子完整内容1234567891011121314151617181920212223242526272829303132333435363738394041424344## 得到博客文章的列表（有分页） ## ### 接口地址 ###&lt;pre&gt; http://www.dodobook.net/post/list &lt;/pre&gt; ### 传递参数 ###&lt;pre&gt;cate_id 分类ID Array（不传显示全部） [1,3,6]page_num 当前页码（可不传） 默认 1page_size 每页记录数目（可不填） 默认 10&lt;/pre&gt; ### 返回值 ###&lt;pre style="background:#222;color:#35b558"&gt;total: 108,list: [ &#123; id: 2718, cate_id: 2, cate_name: "php", view_cnt: "1005", cate_name: "php", name: "Yii2中配置使用连接多个数据库连接", url: "http://www.dodobook.net/php/2718", post_date: "2016-08-20 20:10:08", img_logo: "/upload/img/aaa.png", &#125;, &#123; id: 2718, cate_id: 2, cate_name: "php", view_cnt: "1005", cate_name: "php", name: "PHP实现网址短链接转换的方法", url: "http://www.dodobook.net/php/2710", post_date: "2016-08-16 20:10:08", img_logo: "/upload/img/addsaafff.png", &#125;]&lt;/pre&gt; 高级玩法还有很多，更多的功能等待着大家去摸索去发现…… 4. 总结支持MarkDown语法写作的工具很多，还有很多支持在线编辑MarkDown语法的网站，选择一款适合自己的工具即可，好用高效才是王道!!!!!!]]></content>
      <categories>
        <category>写作</category>
      </categories>
      <tags>
        <tag>MarkDownPad 2</tag>
        <tag>MarkDown</tag>
      </tags>
  </entry>
</search>
